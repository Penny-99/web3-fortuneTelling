import {loadStdlib, ask} from '@reach-sh/stdlib';
import * as backend from './build/index.main.mjs';
const stdlib = loadStdlib();

const FORTUNE =['Good', 'Normal', 'Bad'];
const FORTUNES = {
  'Good': 0, 'G': 0, 'g': 0,
  'Normal': 1, 'N': 1, 'n': 1,
  'Bad': 2, 'B': 2, 'b': 2,
};

const isAlice = await ask.ask(
  `Are you Alice?`,
  ask.yesno
);
const who = isAlice ? 'Alice' : 'Bob';

console.log(`Starting Fortune Telling game as ${who}`);
let acc = null;
const createAcc = await ask.ask(
  `Would you like to create an account? (only possible on devnet)`,
  ask.yesno
);
if (createAcc) {
  const startingBalance = stdlib.parseCurrency(1000);
  acc = await stdlib.newTestAccount(startingBalance);
} else {
  const secret = await ask.ask(
    `What is your account secret?`,
    (x => x)
  );
  acc = await stdlib.newAccountFromSecret(secret);
}

let ctc = null;
if (isAlice) {
  ctc = acc.contract(backend);
  ctc.getInfo().then((info) => {
    console.log(`The contract is deployed as = ${JSON.stringify(info)}`); });
} else {
  const info = await ask.ask(
    `Please paste the contract information:`,
    JSON.parse
  );
  ctc = acc.contract(backend, info);
}

const fmt = (x) => stdlib.formatCurrency(x, 4);
const getBalance = async() => fmt(await stdlib.balanceOf(acc))
const before = await getBalance();
console.log(`Your balance is ${before}`);

const interact = { ...stdlib.hasRandom };

interact.informTimeout = () => {
  console.log(`There was a timeout.`);
  process.exit(1);
};

if (isAlice) {
  const amt = await ask.ask(
    `How much do you want to wager?`,
    stdlib.parseCurrency
  );
  interact.wager = amt;
  interact.deadline = { ETH: 100, ALGO: 100, CFX: 1000 }[stdlib.connector];
  
  interact.getDecision = async (fortune) => {
    console.log(`The fortune told is ${FORTUNE[fortune]}`)
    const decision = await ask.ask(`Do you accept the fortune?(y/n)`, ask.yesno);
    console.log(`The decision you made is ${decision}`);
    return decision;
  };

} else {
  interact.acceptWager = async (amt) => {
    const accepted = await ask.ask(
      `Do you accept the wager of ${fmt(amt)}?(y/n)`,
      ask.yesno
    );
    if (!accepted) {
      process.exit(0);
    }
  };

  interact.tellFortune = async () => {
    const fortune = await ask.ask(`What fortune will you tell?(g/n/b)`, (x) => {
      const fortune = FORTUNES[x];
      if ( fortune === undefined ) {
        throw Error(`Not a valid fortune ${fortune}`);
      }
      return fortune;
    });
    console.log(`The fortune you tell is ${FORTUNE[fortune]}`);
    return fortune;
  };

}
interact.seeOutcome = async (decision, fortune) => {
  if(decision){
      console.log(`The fortune of ${FORTUNE[fortune]} is accepted.`);
  }
  else{
      console.log(`The fortune is ${FORTUNE[fortune]} rejected.`);
  }
};

const part = isAlice ? ctc.p.Alice : ctc.p.Bob;
await part(interact);

const after = await getBalance();
console.log(`Your balance is now ${after}`);

ask.done();